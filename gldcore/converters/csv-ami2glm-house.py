"""Convert AMI data in CSV to a calibratge GLM house object
"""
import warnings
import datetime

defaults = {
    "floor_area" : "1200.0 sf",
}

def get_options(options):

    values = defaults
    for key, value in options.items():
        if not key in values:
            warnings.warn("option '%s' has no default -- it may not be valid")
        values[key] = value
    return values

def write_house(input_file,output_file,options,values):

    with open(output_file,"w") as glm:
        glm.write(f"// generated by csv-ami2glm-house.py {datetime.datetime.now()}\n")
        glm.write(f"// convert( input_file = '{input_file}',\n")
        glm.write(f"//          output_file = '{output_file}',\n")
        glm.write(f"//          options = {options}\n")
        glm.write(f"//          )\n")
        glm.write("object house {\n")
        for key, value in values.items():
            if type(value) is str:
                glm.write(f"\t{key} \"{value}\";\n")
            elif type(value) in (int,float):
                glm.write(f"\t{key} {value};\n")
            else:
                warnings.warn(f"type of {key} is not valid")
                glm.write(f"\t{key} \"{value}\";\n")
        glm.write("}\n")

def convert(input_file, output_file, options={}):
    
    values = get_options(options)

    write_house(input_file,output_file,options,values)


if __name__ == '__main__':
    convert("test_ami.csv","gridlabd.glm",{"floor_area":"1500 sf"})
    convert("test_ami.csv","gridlabd.glm",{"floor_area":1500.0})
